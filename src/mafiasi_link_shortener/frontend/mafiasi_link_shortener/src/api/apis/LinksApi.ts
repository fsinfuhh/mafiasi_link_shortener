/* tslint:disable */
/* eslint-disable */
/**
 * Mafiasi Link Shortener
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: ag-server@informatik.uni-hamburg.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Link,
  LinkRequest,
  PaginatedLinkList,
  PatchedLinkRequest,
} from '../models';
import {
    LinkFromJSON,
    LinkToJSON,
    LinkRequestFromJSON,
    LinkRequestToJSON,
    PaginatedLinkListFromJSON,
    PaginatedLinkListToJSON,
    PatchedLinkRequestFromJSON,
    PatchedLinkRequestToJSON,
} from '../models';

export interface LinksCreateRequest {
    linkRequest: LinkRequest;
}

export interface LinksDestroyRequest {
    _short: string;
}

export interface LinksListRequest {
    limit?: number;
    offset?: number;
}

export interface LinksPartialUpdateRequest {
    _short: string;
    patchedLinkRequest?: PatchedLinkRequest;
}

export interface LinksRetrieveRequest {
    _short: string;
}

export interface LinksUpdateRequest {
    _short: string;
    linkRequest: LinkRequest;
}

/**
 *
 */
export class LinksApi extends runtime.BaseAPI {
    get_headers() {
        let headers: runtime.HTTPHeaders = {};
        const csrf_token = document.cookie.split('; ').find(row => row.startsWith('csrftoken'))?.split('=')[1]
        if (csrf_token) {
            headers['X-CSRFToken'] = csrf_token;
        }
        return headers;
    }

    /**
     */
    async linksCreateRaw(requestParameters: LinksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Link>> {
        if (requestParameters.linkRequest === null || requestParameters.linkRequest === undefined) {
            throw new runtime.RequiredError('linkRequest','Required parameter requestParameters.linkRequest was null or undefined when calling linksCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = this.get_headers();

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/links/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkRequestToJSON(requestParameters.linkRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkFromJSON(jsonValue));
    }

    /**
     */
    async linksCreate(requestParameters: LinksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Link> {
        const response = await this.linksCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async linksDestroyRaw(requestParameters: LinksDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters._short === null || requestParameters._short === undefined) {
            throw new runtime.RequiredError('_short','Required parameter requestParameters._short was null or undefined when calling linksDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = this.get_headers();

        const response = await this.request({
            path: `/api/links/{short}/`.replace(`{${"short"}}`, encodeURIComponent(String(requestParameters._short))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async linksDestroy(requestParameters: LinksDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.linksDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async linksListRaw(requestParameters: LinksListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedLinkList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = this.get_headers();

        const response = await this.request({
            path: `/api/links/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLinkListFromJSON(jsonValue));
    }

    /**
     */
    async linksList(requestParameters: LinksListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedLinkList> {
        const response = await this.linksListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async linksPartialUpdateRaw(requestParameters: LinksPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Link>> {
        if (requestParameters._short === null || requestParameters._short === undefined) {
            throw new runtime.RequiredError('_short','Required parameter requestParameters._short was null or undefined when calling linksPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = this.get_headers();

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/links/{short}/`.replace(`{${"short"}}`, encodeURIComponent(String(requestParameters._short))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedLinkRequestToJSON(requestParameters.patchedLinkRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkFromJSON(jsonValue));
    }

    /**
     */
    async linksPartialUpdate(requestParameters: LinksPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Link> {
        const response = await this.linksPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async linksRetrieveRaw(requestParameters: LinksRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Link>> {
        if (requestParameters._short === null || requestParameters._short === undefined) {
            throw new runtime.RequiredError('_short','Required parameter requestParameters._short was null or undefined when calling linksRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = this.get_headers();

        const response = await this.request({
            path: `/api/links/{short}/`.replace(`{${"short"}}`, encodeURIComponent(String(requestParameters._short))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkFromJSON(jsonValue));
    }

    /**
     */
    async linksRetrieve(requestParameters: LinksRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Link> {
        const response = await this.linksRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async linksUpdateRaw(requestParameters: LinksUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Link>> {
        if (requestParameters._short === null || requestParameters._short === undefined) {
            throw new runtime.RequiredError('_short','Required parameter requestParameters._short was null or undefined when calling linksUpdate.');
        }

        if (requestParameters.linkRequest === null || requestParameters.linkRequest === undefined) {
            throw new runtime.RequiredError('linkRequest','Required parameter requestParameters.linkRequest was null or undefined when calling linksUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = this.get_headers();

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/links/{short}/`.replace(`{${"short"}}`, encodeURIComponent(String(requestParameters._short))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LinkRequestToJSON(requestParameters.linkRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkFromJSON(jsonValue));
    }

    /**
     */
    async linksUpdate(requestParameters: LinksUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Link> {
        const response = await this.linksUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
